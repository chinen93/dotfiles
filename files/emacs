;;===================================================================
;;    Install Packages
;;====================================================================
(setq my-package-list '(nyan-mode
			magit
			expand-region
			helm
			helm-swoop
			multiple-cursors
			guide-key))

(require 'package)
(package-initialize)

(defun pc/install-packages ()
  (setq package-archives
	'(("melpa" . "http://melpa.milkbox.net/packages/")
	  ("org" . "http://orgmode.org/elpa/")
	  ("gnu" . "http://elpa.gnu.org/packages/")
	  ("marmalade" . "http://marmalade-repo.org/packages/")))
  (unless package-archive-contents
  (package-refresh-contents))
  (package-initialize)
  ;; install
  ;; ==automatic==
  (dolist(i-package my-package-list)
    (unless (package-installed-p i-package)
      (package-install i-package)))
  ;; ==manual==
  ;;(dolist(i-package my-package-list)
  ;;  (if (package-installed-p i-package)
  ;;      nil
  ;;    (if (y-or-n-p (format "Package %s is missing. Install it? " i-package))
  ;;	(package-install i-package)
  ;;      i-package)))
  )
  
;;====================================================================
;;    Windows Managemet
;;====================================================================
;; TODO_NOW


;;====================================================================
;;    Key Binding
;;====================================================================
;; Key Binding
(global-set-key (kbd "C-s") 'isearch-forward-regexp) 
(global-set-key (kbd "C-r") 'isearch-backward-regexp)

;;====================================================================
;;    Layout
;;====================================================================
;; Turn off mouse interface early in startup to avoid momentary display
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

;; No splash screen please ... jeez
(setq inhibit-startup-message t)

;; Place Emacs in the location (0, 80) on screen 
(setq initial-frame-alist
  '((top  .  0)
    (left . 80)))

;; Change the font
;; TODO_NOW
;;(set-default-font  nil t)

(if (not (require 'whitespace nil t))
    (message "ERROR: whitespace not found")
    (progn (message "Whitespace")
	   (message "Loaded")
	   ))
;; TODO_NOW
;;(setq whitespace-line-column 80)
;;(setq whitespace-style '(face lines-tail))
;;(add-hook 'prog-mode-hook 'whitespace-mode)

;;====================================================================
;;    Git
;;====================================================================
;; TODO_NOW

;;====================================================================
;;    Custom mode
;;====================================================================
(setq c-default-style "linux"
      c-basic-offset 4)
;;====================================================================
;;    Helm
;;====================================================================
(if (not (require 'helm nil t))
    (message "ERROR: helm not found")
    (progn (message "helm")
	   (message "Loaded")
	   (global-set-key (kbd "M-x") 'helm-M-x)
	   (global-set-key (kbd "C-x C-f") 'helm-find-files)
	   (global-set-key (kbd "M-y") 'helm-show-kill-ring)
	   (global-set-key (kbd "M-1") 'helm-mini)
	   ;;(setq helm-M-x-fuzzy-match t)
	   (setq helm-buffers-fuzzy-matching t)
	   (setq helm-recentf-fuzzy-match t)
	   (setq helm-imenu-fuzzy-match t)
	   (helm-autoresize-mode t)
	   (helm-mode 1)
	   ))

;;====================================================================
;;    General
;;====================================================================
;; Guide Key
(if (not (require 'guide-key nil t))
    (message "ERROR: guide-key not found")
    (progn (message "Guide Key")
	   (message "Loaded")
	   (setq guide-key/guide-key-sequence nil)
	   (defun enable-guide-key ()
	     (interactive)
	     (guide-key-mode 1)
	     (setq guide-key/guide-key-sequence t)
	     (message "Guide Key enabled"))
	   (defun disable-guide-key ()
	     (interactive)
	     (guide-key-mode nil)
	     (setq guide-key/guide-key-sequence nil)
	     (message "Guide Key disabled"))
	   (global-set-key (kbd "C-c =") 'enable-guide-key)
	   (global-set-key (kbd "C-c -") 'disable-guide-key)
	   ))
	   
;; Show an notication for invalid operations
(setq visible-bell t)

;; Nyan Mode
(if (not (require 'nyan-mode nil t))
    (message "ERROR: nyan-mode not found")
    (progn (message "Nyan Mode")
	   (message "Loaded")
	   (require 'nyan-mode)
	   (nyan-mode 1)
	   ))

;; Write backup files to own directory
(setq backup-directory-alist
      `(("." . ,(expand-file-name
                 (concat user-emacs-directory "backups")))))

;; Make backups of files, even when they're in version control
(setq vc-make-backup-files t)

;; Show matching parenthesis. 
(show-paren-mode t)

;; Current line & column of cursor in the mode line (bar at the bottom)
(line-number-mode 1)
(setq column-number-mode t)

;; Opens a TODO_NOW file every time the emacs starts
(find-file "~/.todo_list.org")

;; Load theme
(load-theme 'deeper-blue)

;; Expand Region
(if (not (require 'expand-region nil t))
    (message "ERROR: expand-region not found")
    (progn (message "Expand Region")
	   (message "Loaded")
	   (global-set-key (kbd "C-=") 'er/expand-region)
	   ))

;; Set titles for frame and icon (%f == file name, %b == buffer name)
;;(setq-default frame-title-format (list "Emacs: %f"))
;;(setq-default icon-title-format "Emacs - %b")

(if (not (require 'multiple-cursors nil t))
    (message "ERROR: multiple-cursors not found")
    (progn (message "Multiple Cursors")
	   (message "Loaded")
	   (global-set-key (kbd "C-S-<right>") 'mc/mark-next-like-this)
	   (global-set-key (kbd "C-S-<left>") 'mc/mark-previous-like-this)
	   ))
(if (not (require 'helm-swoop nil t))
    (message "ERROR: helm-swoop not found")
    (progn (message "Helm Swoop")
	   (message "Loaded")
	   (global-set-key (kbd "<C-f1>") 'helm-swoop)
	   (setq helm-swoop-split-direction 'split-window-vertically)
	   (setq helm-swoop-speed-or-color nil)
	   ))
;;====================================================================
;;    Python
;;====================================================================
;; use the python 3.1
(setq py-python-command "/usr/bin/python3.1")

;;====================================================================
;;    Utilities
;;====================================================================
;; Change "yes or no" to "y or n"
(fset 'yes-or-no-p 'y-or-n-p)

(setq initial-scratch-message "
;; ***********************************************
;; ******************* SCRATCH *******************
;; ***********************************************
;;
")

(defun pc/reload-dot-emacs ()
  "Save the .emacs buffer if needed, then reaload .emacs."
  (interactive)
  (let ((dot-emacs "~/.emacs"))
    (and (get-file-buffer dot-emacs)
	 (save-buffer (get-file-buffer dot-emacs)))
    (load-file dot-emacs))
  (message "Re-initialized!"))

(defun c-comment-line ()
  (interactive)
  (beginning-of-line)
  (insert "/*")
  (end-of-line)
  (insert " */"))

(defun c-uncomment-line ()
  (interactive)
  (beginning-of-line)
  (delete-char 2)
  (end-of-line)
  (backward-char 3)
  (delete-char 3))

;;====================================================================
;;    Files modes
;;====================================================================
;; TODO_NOW
