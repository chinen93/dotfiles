;;===================================================================
;;    Install Packages
;;====================================================================
(setq my-package-list '(use-package
			nyan-mode
			magit
			expand-region
			helm
			helm-swoop
			multiple-cursors
			guide-key
			monokai-theme
			org-install))

(require 'package)
(package-initialize)

(defun my/install-packages ()
  (interactive)
  (setq package-archives
	'(("melpa" . "http://melpa.milkbox.net/packages/")
	  ("org" . "http://orgmode.org/elpa/")
	  ("gnu" . "http://elpa.gnu.org/packages/")
	  ("marmalade" . "http://marmalade-repo.org/packages/")))
  (unless package-archive-contents
  (package-refresh-contents))
  (package-initialize)
  ;; install
  (dolist(i-package my-package-list)
    (unless (package-installed-p i-package)
      (package-install i-package))))


(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(setq use-package-verbose t)
(require 'use-package)

(org-babel-load-file "~/git/dotfiles/files/pchinen.org")

;;====================================================================
;;    Windows Managemet
;;====================================================================
(use-package windmove
  :ensure t
  :bind (("C-c <right>" . windmove-right)
	 ("C-c <left>" . windmove-left)
	 ("C-c <up>" . windmove-up)
	 ("C-c <down>" . windmove-down)))


;;====================================================================
;;    Key Binding
;;====================================================================
;; Key Binding
(global-set-key (kbd "C-s") 'isearch-forward-regexp) 
(global-set-key (kbd "C-r") 'isearch-backward-regexp)

;;====================================================================
;;    Layout
;;====================================================================
;; Turn off mouse interface early in startup to avoid momentary display
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

;; No splash screen please ... jeez
(setq inhibit-startup-message t)


;; Change the font
;; TODO_NOW
;;(set-default-font  nil t)

;; TODO_NOW
;;(setq whitespace-line-column 80)
;;(setq whitespace-style '(face lines-tail))
;;(add-hook 'prog-mode-hook 'whitespace-mode)

;;====================================================================
;;    Git
;;====================================================================
;; TODO_NOW

;;====================================================================
;;    Org
;;====================================================================
(setq org-return-follows-link t)

(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (sh . t)
   (python . t)
   (R . t)
   (ruby . t)
   (ditaa . t)
   (dot . t)
   (octave . t)
   (sqlite . t)
   (perl . t)
   ))

(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
  

;;====================================================================
;;    Custom mode
;;====================================================================
(setq c-default-style "linux"
      c-basic-offset 4)
;;====================================================================
;;    Helm
;;====================================================================
(use-package helm
  :ensure t
  :config
  (progn
    (require 'helm-config)
    (helm-autoresize-mode 1)
    (helm-mode))
  :bind (("C-c h" . helm-mini)
	 ("M-x" . helm-M-x)
	 ("M-y" . helm-show-kill-ring)))

;;====================================================================
;;    General
;;====================================================================
(use-package guide-key
  :ensure t
  :config		     
  (progn (message "Guide Key")
	 (message "Loaded")
	 (setq guide-key/guide-key-sequence nil)
	 (defun enable-guide-key ()
	   (interactive)
	   (guide-key-mode 1)
	   (setq guide-key/guide-key-sequence t)
	   (message "Guide Key enabled"))
	 (defun disable-guide-key ()
	   (interactive)
	   (guide-key-mode -1)
	   (setq guide-key/guide-key-sequence nil)
	   (message "Guide Key disabled"))
	 (global-set-key (kbd "C-c =") 'enable-guide-key)
	 (global-set-key (kbd "C-c -") 'disable-guide-key)))


    
;; Show an notication for invalid operations
(setq visible-bell t)

;; Nyan Mode
(use-package nyan-mode
  :ensure t
  :config
  (progn (message "Nyan Mode")
	 (message "Loaded")
	 (nyan-mode 1)))

;; Write backup files to own directory
(setq backup-directory-alist
      `(("." . ,(expand-file-name
                 (concat user-emacs-directory "backups")))))

;; Make backups of files, even when they're in version control
(setq vc-make-backup-files t)

;; Show matching parenthesis. 
(show-paren-mode t)

;; Current line & column of cursor in the mode line (bar at the bottom)
(line-number-mode 1)
(setq column-number-mode t)

;; Open something when emacs starts
(if (file-exists-p "~/git/org/help.org")
    (progn(find-file "~/git/org/help.org")))

;; Load theme
(use-package monokai-theme
  :ensure t
  :config
  (progn (message "Monokai Theme")
	 (message "Loaded")
	 (load-theme 'monokai t)
	 (set-background-color "#121212")))

;; Expand Region
(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region)
  :config
  (progn (message "Expand Region")
	 (message "Loaded")))

;; Set titles for frame and icon (%f == file name, %b == buffer name)
;;(setq-default frame-title-format (list "Emacs: %f"))
;;(setq-default icon-title-format "Emacs - %b")

(if (not (require 'multiple-cursors nil t))
    (message "ERROR: multiple-cursors not found")
    (progn (message "Multiple Cursors")
	   (message "Loaded")
	   (global-set-key (kbd "C-S-<right>") 'mc/mark-next-like-this)
	   (global-set-key (kbd "C-S-<left>") 'mc/mark-previous-like-this)
	   ))
(if (not (require 'helm-swoop nil t))
    (message "ERROR: helm-swoop not found")
    (progn (message "Helm Swoop")
	   (message "Loaded")
	   (global-set-key (kbd "<C-f1>") 'helm-swoop)
	   (setq helm-swoop-split-direction 'split-window-vertically)
	   (setq helm-swoop-speed-or-color nil)
	   ))
;;====================================================================
;;    Python
;;====================================================================
;; use the python 3.1
(setq py-python-command "/usr/bin/python3.1")

;;====================================================================
;;    Utilities
;;====================================================================
;; Change "yes or no" to "y or n"
(fset 'yes-or-no-p 'y-or-n-p)

(setq initial-scratch-message "
;; ***********************************************
;; ******************* SCRATCH *******************
;; ***********************************************
;;
")

(defun my/reload-dot-emacs ()
  "Save the .emacs buffer if needed, then reaload .emacs."
  (interactive)
  (let ((dot-emacs "~/.emacs"))
    (and (get-file-buffer dot-emacs)
	 (save-buffer (get-file-buffer dot-emacs)))
    (load-file dot-emacs))
  (message "Re-initialized!"))

(defun my/japanese-config ()
  (interactive)
  (setq org-table-automatic-realign nil)
  (set-input-method 'japanese)
  (message "Japanese Config!"))

(defun c-comment-line ()
  (interactive)
  (beginning-of-line)
  (insert "/*")
  (end-of-line)
  (insert " */"))

(defun c-uncomment-line ()
  (interactive)
  (beginning-of-line)
  (delete-char 2)
  (end-of-line)
  (backward-char 3)
  (delete-char 3))
;;====================================================================
;;    Org-mode
;;====================================================================
(setq org-tags-match-list-sublevels t)
;;====================================================================
;;    Files modes
;;====================================================================

(add-to-list 'auto-mode-alist '(".emacs" . lisp-mode))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-agenda-files (quote ("~/git/org/agenda/routine.org")))
 '(safe-local-variable-values (quote ((eval my/japanese-config)))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
